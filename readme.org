#+title: QMK Configuration and Layout for SplitShift
#+author: Biruh Tesfahun

SplitShift is a custom split keyboard based on the Corne desgin with 3x5_3 layout.

* Instruction

This is an Org file that defines configurations and tangles them to specific locations in the QMK tree. To build the firmware please consult the qmk firmware.

* Configurations

** definitions
[[https://github.com/qmk/qmk_firmware/blob/master/docs/reference_info_json.md][QMK info.json documentation]]
We first create the info.json file and start describing the keyboard.
#+BEGIN_SRC json :tangle info.json
{
    "keyboard_name": "splitshift",
    "manufacturer": "DIY",
    "url": "https://github.com/biruh/splitshift.git",
    "maintainer": "biruh",
    "split": {
        "enabled": true
    },
#+END_SRC

the devices vid and pid are taken from Corne
#+BEGIN_SRC json :tangle info.json
    "usb": {
        "vid": "0x4653",
        "pid": "0x0001",
        "device_version": "0.0.1"
    },
#+END_SRC

*** hardware and wiring
I have used the [[https://deskthority.net/wiki/Elite-C][Elite-C]] microcontroller which is Pro Micro compatible and uses ATmega32U4.
The wired the rows and columns to the following pins.
#+BEGIN_SRC json :tangle info.json
    "processor": "atmega32u4",
    "matrix_pins": {
        "cols": ["F1", "F5", "B1", "F6", "B2"],
        "rows": ["D5", "C6", "D4", "D0"]
    },
    "diode_direction": "COL2ROW",
#+END_SRC

We will enable some features. The bootmagic feature allows us to enter the bootloader by holding a specific key while we plug the keyboard. The extrakey allows us to control media.
#+BEGIN_SRC json :tangle info.json
    "build": {
        "lto": true
    },
    "features": {
        "bootmagic": true,
        "extrakey": true,
        "mousekey": true
    },
    "community_layouts": ["split_3x5_3"]
}
#+END_SRC

 some more definitions in keyboard.json

#+BEGIN_SRC json :tangle keyboard.json
{
    "bootloader": "atmel-dfu",
    "split": {
        "transport": {
            "sync": {
                "matrix_state": true
            }
        }
    },
    "development_board": "promicro",
    "layouts": {
        "LAYOUT_split_3x5_3": {
            "layout": [
                { "matrix": [0, 0], "x": 0, "y": 0.3 },
                { "matrix": [0, 1], "x": 1, "y": 0.1 },
                { "matrix": [0, 2], "x": 2, "y": 0 },
                { "matrix": [0, 3], "x": 3, "y": 0.1 },
                { "matrix": [0, 4], "x": 4, "y": 0.2 },

                { "matrix": [4, 4], "x": 8, "y": 0.2 },
                { "matrix": [4, 3], "x": 9, "y": 0.1 },
                { "matrix": [4, 2], "x": 10, "y": 0 },
                { "matrix": [4, 1], "x": 11, "y": 0.1 },
                { "matrix": [4, 0], "x": 12, "y": 0.3 },

                { "matrix": [1, 0], "x": 0, "y": 1.3 },
                { "matrix": [1, 1], "x": 1, "y": 1.1 },
                { "matrix": [1, 2], "x": 2, "y": 1 },
                { "matrix": [1, 3], "x": 3, "y": 1.1 },
                { "matrix": [1, 4], "x": 4, "y": 1.2 },

                { "matrix": [5, 4], "x": 8, "y": 1.2 },
                { "matrix": [5, 3], "x": 9, "y": 1.1 },
                { "matrix": [5, 2], "x": 10, "y": 1 },
                { "matrix": [5, 1], "x": 11, "y": 1.1 },
                { "matrix": [5, 0], "x": 12, "y": 1.3 },

                { "matrix": [2, 0], "x": 0, "y": 2.3 },
                { "matrix": [2, 1], "x": 1, "y": 2.1 },
                { "matrix": [2, 2], "x": 2, "y": 2 },
                { "matrix": [2, 3], "x": 3, "y": 2.1 },
                { "matrix": [2, 4], "x": 4, "y": 2.2 },

                { "matrix": [6, 4], "x": 8, "y": 2.2 },
                { "matrix": [6, 3], "x": 9, "y": 2.1 },
                { "matrix": [6, 2], "x": 10, "y": 2 },
                { "matrix": [6, 1], "x": 11, "y": 2.1 },
                { "matrix": [6, 0], "x": 12, "y": 2.3 },

                { "matrix": [3, 2], "x": 3, "y": 3.7 },
                { "matrix": [3, 3], "x": 4, "y": 3.7 },
                { "matrix": [3, 4], "x": 5, "y": 3.2, "h": 1.5 },

                { "matrix": [7, 4], "x": 7, "y": 3.2, "h": 1.5 },
                { "matrix": [7, 3], "x": 8, "y": 3.7 },
                { "matrix": [7, 2], "x": 9, "y": 3.7 }
            ]
        }
    }
}
#+END_SRC
*** caps word and leader keys

#+BEGIN_SRC c :tangle config.h

#define MATRIX_ROW_PINS_RIGHT {D5, C6, D4, D0}
#define MATRIX_COL_PINS_RIGHT {F1, F5, B1, F6, B2}

#define BOOTMAGIC_ROW 0
#define BOOTMAGIC_COLUMN 0

#define BOOTMAGIC_ROW_RIGHT 4
#define BOOTMAGIC_COLUMN_RIGHT 0

#define SPLIT_HAND_PIN B7
#define SPLIT_HAND_PIN_LOW_IS_LEFT

#define SOFT_SERIAL_PIN D3
#+END_SRC
* Layout


#+BEGIN_SRC c :tangle keymap.c

#include QMK_KEYBOARD_H

#if __has_include("keymap.h")
#    include "keymap.h"
#endif
#include "leader.h"


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [0] = LAYOUT_split_3x5_3(
KC_Q,        KC_W,        KC_E,        KC_R,        KC_T,        KC_Y,        KC_U,        KC_I,        KC_O,        KC_P,
LSFT_T(KC_A),KC_S,        KC_D,        KC_F,        KC_G,        KC_H,        KC_J,        KC_K,        KC_L,        RSFT_T(KC_SCLN),
LCTL_T(KC_Z),LALT_T(KC_X),LGUI_T(KC_C),KC_V,        KC_B,        KC_N,        KC_M,        KC_COMM,        RALT_T(KC_DOT),        RCTL_T(KC_SLSH),        LT(5,       KC_DEL),        LT(1,       KC_ESC),        LT(3,       KC_BSPC),        LT(4,       KC_SPC),        LT(2,       KC_ENT),        LT(6,       KC_NO)),
    [1] = LAYOUT_split_3x5_3(KC_EXLM,        KC_AT,        KC_HASH,        KC_DLR,        KC_PERC,        KC_CIRC,        KC_AMPR,        KC_ASTR,        KC_MINS,        KC_EQL,        KC_TRNS,        KC_2,        KC_LPRN,        KC_RPRN,        KC_5,        KC_6,        KC_7,        KC_8,        KC_9,        KC_0,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TILD,        KC_LT,        KC_GT,        KC_UNDS,        KC_PPLS,        KC_NO,        KC_NO,        LGUI(KC_ESC),        KC_BSLS,        KC_PIPE,        KC_SLSH),
    [2] = LAYOUT_split_3x5_3(KC_EXLM,        KC_AT,        KC_HASH,        KC_DLR,        KC_PERC,        KC_CIRC,        KC_AMPR,        KC_ASTR,        KC_MINS,        KC_EQL,        KC_1,        KC_2,        KC_3,        KC_4,        KC_5,        KC_6,        KC_LBRC,        KC_RBRC,        KC_9,        KC_TRNS,        KC_NO,        KC_NO,        KC_LCBR,        KC_RCBR,        KC_NO,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_GRV,        KC_QUOT,        KC_DQUO,        KC_NO,        KC_NO,        KC_NO),
    [3] = LAYOUT_split_3x5_3(KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_ESC,        KC_TRNS,        KC_HOME,        KC_PGDN,        KC_PGUP,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_ENT,        KC_TAB,        KC_LEFT,        KC_DOWN,        KC_UP,        KC_RGHT,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_END,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_BSPC,        KC_SPC,        KC_NO,        KC_TRNS,        KC_TRNS),
    [4] = LAYOUT_split_3x5_3(KC_TRNS,        KC_TRNS,        KC_PSCR,        KC_ESC,        KC_INS,        KC_HOME,        KC_PGDN,        KC_PGUP,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        QK_LEAD,        KC_ENT,        KC_TAB,        KC_LEFT,        KC_DOWN,        KC_UP,        KC_RGHT,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_END,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_BSPC,        KC_SPC,        KC_NO,        KC_TRNS,        KC_TRNS),
    [5] = LAYOUT_split_3x5_3(KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_COPY,        KC_UNDO,        KC_CUT,        KC_TRNS,        KC_PSTE,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_MS_L,        KC_MS_D,        KC_MS_U,        KC_MS_R,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_WH_D,        KC_WH_U,        KC_TRNS,        KC_TRNS,        KC_NO,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_BTN1,        KC_BTN2),
    [6] = LAYOUT_split_3x5_3(QK_BOOT,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_F11,        KC_F12,        KC_F1,        KC_F2,        KC_F3,        KC_F4,        KC_F5,        KC_F6,        KC_F7,        KC_F8,        KC_F9,        KC_F10,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_NO)
};

void leader_start_user(void) {
    // Do something when the leader key is pressed
}

void leader_end_user(void) {
    if (leader_sequence_one_key(KC_F)) {
        // Leader, f => Types the below string
        SEND_STRING("QMK is awesome.");
    } else if (leader_sequence_two_keys(KC_D, KC_D)) {
        // Leader, d, d => Ctrl+A, Ctrl+C
        SEND_STRING(SS_LCTL("a") SS_LCTL("c"));
    } else if (leader_sequence_three_keys(KC_D, KC_D, KC_S)) {
        // Leader, d, d, s => Types the below string
        SEND_STRING("https://start.duckduckgo.com\n");
    } else if (leader_sequence_two_keys(KC_A, KC_S)) {
        // Leader, a, s => GUI+S
        tap_code16(LGUI(KC_S));
    }
}

#+END_SRC


#+BEGIN_SRC c :tangle config.h

#define MATRIX_ROW_PINS_RIGHT {D5, C6, D4, D0}
#define MATRIX_COL_PINS_RIGHT {F1, F5, B1, F6, B2}

#define BOOTMAGIC_ROW 0
#define BOOTMAGIC_COLUMN 0

#define BOOTMAGIC_ROW_RIGHT 4
#define BOOTMAGIC_COLUMN_RIGHT 0

#define SPLIT_HAND_PIN B7
#define SPLIT_HAND_PIN_LOW_IS_LEFT

#define SOFT_SERIAL_PIN D3
#+END_SRC

* Building and Flashing
Assuming the QMK toolkit is installed correctly setup to do build and flash, we need to ensure $QMK/keyboards/splitshift directory exists and we will copy the config.h, keymap.c and info.json files to the it.
**** copy files
#+BEGIN_SRC shell
mkdir -p ~/qmk_firmware/keyboards/{splitshift,splitshift/keymaps/default/}
cp {config.h,info.json,keyboard.json} ~/qmk_firmware/keyboards/splitshift
cp keymap.c ~/qmk_firmware/keyboards/splitshift/keymaps/default/
#+END_SRC

#+RESULTS:
**** build it



#+BEGIN_SRC shell :results output :shebang #!/usr/bin/env bash
~/.local/bin/qmk clean
~/.local/bin/qmk compile -kb splitshift -km default
#+END_SRC

#+RESULTS:
#+begin_example
QMK Firmware 0.26.8
Deleting .build/ ... done.


Generating: .build/obj_splitshift_default/src/info_deps.d                                           [32;01m[OK][0m
Generating: .build/obj_splitshift_default/src/default_keyboard.c                                    [32;01m[OK][0m
avr-gcc (GCC) 8.3.0
Copyright (C) 2018 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Generating: .build/obj_splitshift_default/src/info_config.h                                         [32;01m[OK][0m
Generating: .build/obj_splitshift_default/src/default_keyboard.h                                    [32;01m[OK][0m
Compiling: .build/obj_splitshift_default/src/default_keyboard.c                                     [32;01m[OK][0m
Compiling: quantum/keymap_introspection.c                                                           [32;01m[OK][0m
Compiling: quantum/quantum.c                                                                        [32;01m[OK][0m
Compiling: quantum/bitwise.c                                                                        [32;01m[OK][0m
Compiling: quantum/led.c                                                                            [32;01m[OK][0m
Compiling: quantum/action.c                                                                         [32;01m[OK][0m
Compiling: quantum/action_layer.c                                                                   [32;01m[OK][0m
Compiling: quantum/action_tapping.c                                                                 [32;01m[OK][0m
Compiling: quantum/action_util.c                                                                    [32;01m[OK][0m
Compiling: quantum/eeconfig.c                                                                       [32;01m[OK][0m
Compiling: quantum/keyboard.c                                                                       [32;01m[OK][0m
Compiling: quantum/keymap_common.c                                                                  [32;01m[OK][0m
Compiling: quantum/keycode_config.c                                                                 [32;01m[OK][0m
Compiling: quantum/sync_timer.c                                                                     [32;01m[OK][0m
Compiling: quantum/logging/debug.c                                                                  [32;01m[OK][0m
Compiling: quantum/logging/sendchar.c                                                               [32;01m[OK][0m
Compiling: quantum/matrix_common.c                                                                  [32;01m[OK][0m
Compiling: quantum/matrix.c                                                                         [32;01m[OK][0m
Compiling: quantum/debounce/sym_defer_g.c                                                           [32;01m[OK][0m
Compiling: quantum/split_common/split_util.c                                                        [32;01m[OK][0m
Compiling: quantum/split_common/transport.c                                                         [32;01m[OK][0m
Compiling: quantum/split_common/transactions.c                                                      [32;01m[OK][0m
Compiling: quantum/main.c                                                                           [32;01m[OK][0m
Assembling: platforms/avr/xprintf.S                                                                 [32;01m[OK][0m
Compiling: platforms/avr/printf.c                                                                   [32;01m[OK][0m
Compiling: quantum/bootmagic/bootmagic.c                                                            [32;01m[OK][0m
Compiling: quantum/crc.c                                                                            [32;01m[OK][0m
Compiling: quantum/process_keycode/process_grave_esc.c                                              [32;01m[OK][0m
Compiling: quantum/process_keycode/process_magic.c                                                  [32;01m[OK][0m
Compiling: quantum/mousekey.c                                                                       [32;01m[OK][0m
Compiling: quantum/send_string/send_string.c                                                        [32;01m[OK][0m
Compiling: quantum/process_keycode/process_space_cadet.c                                            [32;01m[OK][0m
Compiling: tmk_core/protocol/host.c                                                                 [32;01m[OK][0m
Compiling: tmk_core/protocol/report.c                                                               [32;01m[OK][0m
Compiling: tmk_core/protocol/usb_device_state.c                                                     [32;01m[OK][0m
Compiling: tmk_core/protocol/usb_util.c                                                             [32;01m[OK][0m
Compiling: platforms/suspend.c                                                                      [32;01m[OK][0m
Compiling: platforms/synchronization_util.c                                                         [32;01m[OK][0m
Compiling: platforms/timer.c                                                                        [32;01m[OK][0m
Compiling: platforms/avr/hardware_id.c                                                              [32;01m[OK][0m
Compiling: platforms/avr/platform.c                                                                 [32;01m[OK][0m
Compiling: platforms/avr/suspend.c                                                                  [32;01m[OK][0m
Compiling: platforms/avr/timer.c                                                                    [32;01m[OK][0m
Compiling: platforms/avr/bootloaders/dfu.c                                                          [32;01m[OK][0m
Compiling: platforms/avr/drivers/i2c_master.c                                                       [32;01m[OK][0m
Archiving: .build/obj_splitshift_default/i2c_master.o                                               [32;01m[OK][0m
Compiling: platforms/avr/drivers/i2c_slave.c                                                        [32;01m[OK][0m
Archiving: .build/obj_splitshift_default/i2c_slave.o                                                [32;01m[OK][0m
Compiling: platforms/avr/drivers/serial.c                                                           [32;01m[OK][0m
Archiving: .build/obj_splitshift_default/serial.o                                                   [32;01m[OK][0m
Compiling: tmk_core/protocol/lufa/lufa.c                                                            [32;01m[OK][0m
Compiling: tmk_core/protocol/usb_descriptor.c                                                       [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Class/Common/HIDParser.c                                       [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Device_AVR8.c                                        [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/EndpointStream_AVR8.c                                [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Endpoint_AVR8.c                                      [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Host_AVR8.c                                          [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/PipeStream_AVR8.c                                    [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/Pipe_AVR8.c                                          [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.c                                 [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBInterrupt_AVR8.c                                  [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/ConfigDescriptors.c                                       [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/DeviceStandardReq.c                                       [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/Events.c                                                  [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.c                                         [32;01m[OK][0m
Compiling: lib/lufa/LUFA/Drivers/USB/Core/USBTask.c                                                 [32;01m[OK][0m
Compiling: tmk_core/protocol/lufa/usb_util.c                                                        [32;01m[OK][0m
Linking: .build/splitshift_default.elf                                                              [32;01m[OK][0m
Creating load file for flashing: .build/splitshift_default.hex                                      [32;01m[OK][0m
Copying splitshift_default.hex to qmk_firmware folder                                               [32;01m[OK][0m
Checking file size of splitshift_default.hex                                                        [32;01m[OK][0m
 ,* The firmware size is fine - 16016/28672 (55%, 12656 bytes free)
#+end_example

**** flashing
#+BEGIN_SRC shell :results output
~/.local/bin/qmk flash splitshift_default.hex
#+END_SRC

#+RESULTS:
